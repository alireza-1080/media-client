// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  username  String   @unique
  clerkId   String   @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts    Post[]
  comments Comment[]
  likes    Like[]

  followers  Follow[] @relation(name: "following") // All the users who follow this user
  followings Follow[] @relation(name: "follower") // All the users this user follows

  notifications        Notification[] @relation(name: "userNotification")
  notificationsCreated Notification[] @relation(name: "notificationCreator")
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId  String   @db.ObjectId
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author        User           @relation(fields: [authorId], references: [id])
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  authorId  String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  author       User           @relation(fields: [authorId], references: [id])
  post         Post           @relation(fields: [postId], references: [id])
  notification Notification[]

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())

  follower  User @relation(name: "follower", fields: [followerId], references: [id])
  following User @relation(name: "following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  creatorId String           @db.ObjectId
  type      NotificationType
  read      Boolean          @default(false)
  postId    String?          @db.ObjectId
  commentId String?          @db.ObjectId
  createdAt DateTime         @default(now())

  user    User     @relation(name: "userNotification", fields: [userId], references: [id])
  creator User     @relation(name: "notificationCreator", fields: [creatorId], references: [id])
  post    Post?    @relation(fields: [postId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
